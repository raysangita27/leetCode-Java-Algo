/*
Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Index { 
  
    int index = 0; 
} 
class Solution {
   Index index = new Index(); 
    
    public TreeNode bstFromPreorder(int[] preorder) {
        if(preorder.length == 0)
            return null;
        if(preorder.length == 1)
            return new TreeNode(preorder[preorder.length-1]);
        return createBST(preorder,index, 0,preorder.length-1,preorder.length );
    }
    
   
    TreeNode createBST(int[] preorder,  Index preIndex, int left, int right, int n){
        if( preIndex.index >= n || left > right )
            return null;
        TreeNode root = new TreeNode(preorder[preIndex.index]); 
        preIndex.index = preIndex.index + 1; 
        if(left == right )
            return root;
        int nextInd; 
        for (nextInd = left; nextInd <= right; ++nextInd) { 
            if (preorder[nextInd] > root.val) { 
                break; 
            } 
        } 
        root.left = createBST(preorder,preIndex ,preIndex.index, nextInd-1,n);
        root.right = createBST(preorder,preIndex, nextInd,right, n);
        return root;
        
    }
}
